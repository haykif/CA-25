import nfc
import RPi.GPIO as GPIO
import time
from datetime import datetime #pour g√©rer la date et l heure



# CONFIGURATION DE LA G√ÇCHE √âLECTRIQUE
RELAIS_PIN = 2  # GPIO 17 (adapter selon ton branchement)
GPIO.setmode(GPIO.BCM)
GPIO.setup(RELAIS_PIN, GPIO.OUT)
GPIO.output(RELAIS_PIN, GPIO.HIGH)  # Par d√©faut, la g√¢che est verrouill√©e


def activer_gache():
    """ Active la g√¢che √©lectrique pendant 3 secondes """
    print("‚úÖ Acc√®s autoris√© ! Ouverture de la porte...")
    GPIO.output(RELAIS_PIN, GPIO.LOW)  # D√©verrouille la g√¢che
    time.sleep(3)
    GPIO.output(RELAIS_PIN, GPIO.HIGH)  # Verrouille la g√¢che apr√®s 3 sec
    print("üîí Porte referm√©e.")


def on_connect(tag):
    """ Fonction appel√©e lorsqu'une carte NFC est d√©tect√©e """
    card_id = tag.identifier.hex()  # Convertir l'ID en hexad√©cimal
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S") #format date et heure


    print(f"üì° Carte d√©tect√©e : {card_id}")
    print(f"Badgeage effectu√© a : {current_time}") #ajout de la date et de l'heure
    
    # Toute carte active la g√¢che
    activer_gache()

    return False  # Ne garde pas la carte connect√©e


def read_card():
    """ Lecture continue des cartes NFC """
    with nfc.ContactlessFrontend('usb') as clf:
        print("üì° En attente d'une carte NFC...")
        while True:
            try:
                clf.connect(rdwr={'on-connect': on_connect})
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur NFC : {e}")

try:
    read_card()
except KeyboardInterrupt:
    print("‚èπÔ∏è Arr√™t du programme.")
    GPIO.cleanup()  # Lib√©rer les GPIO avant de quitter